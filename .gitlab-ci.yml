stages:
  - build
  - deploy

variables:
  APP_NAME: "depo-iq"
  AWS_ROLE_ARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/gitlab-oidc-role"
  AWS_REGION: "${AWS_REGION}"
  AWS_WEB_IDENTITY_TOKEN_FILE: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
  BACKEND_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}/backend:${CI_COMMIT_SHA}"
  FRONTEND_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}/frontend:${CI_COMMIT_SHA}"
  BACKEND_SECRET_ID: "${BACKEND_SECRET_ID}"
  FRONTEND_SECRET_ID: "${FRONTEND_SECRET_ID}"

before_script:
  - apk add --no-cache jq aws-cli
  - |
    aws configure set role_arn "$AWS_ROLE_ARN"
    aws configure set web_identity_token_file "$AWS_WEB_IDENTITY_TOKEN_FILE"
    aws configure set region "$AWS_REGION"

build-backend:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    - |
      # Fetch backend secrets from AWS Secrets Manager
      BACKEND_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id $BACKEND_SECRET_ID --query 'SecretString' --output text)
      echo "$BACKEND_SECRET_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > backend/.env
    - docker build -t $BACKEND_IMAGE -f backend/Dockerfile backend/
    - docker push $BACKEND_IMAGE
  only:
    - main

build-frontend:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    - |
      # Fetch frontend secrets from AWS Secrets Manager
      FRONTEND_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id $FRONTEND_SECRET_ID --query 'SecretString' --output text)
      echo "$FRONTEND_SECRET_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > frontend/.env
    - docker build -t $FRONTEND_IMAGE -f frontend/Dockerfile frontend/
    - docker push $FRONTEND_IMAGE
  only:
    - main

deploy:
  stage: deploy
  image: alpine
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$EC2_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
        # Pull and start MongoDB
        docker pull mongo:latest
        docker stop mongo || true
        docker rm mongo || true
        docker run -d --name mongo -p 27017:27017 mongo:latest

        # Pull and start Redis
        docker pull redis:latest
        docker stop redis || true
        docker rm redis || true
        docker run -d --name redis -p 6379:6379 redis:latest

        # Deploy Backend
        docker pull $BACKEND_IMAGE
        docker stop backend || true
        docker rm backend || true
        docker run -d --name backend --link mongo:mongo --link redis:redis -p 4000:4000 $BACKEND_IMAGE

        # Deploy Frontend
        docker pull $FRONTEND_IMAGE
        docker stop frontend || true
        docker rm frontend || true
        docker run -d --name frontend -p 3000:3000 $FRONTEND_IMAGE

        # Reload Nginx if necessary
        sudo systemctl reload nginx
      EOF
  only:
    - main
