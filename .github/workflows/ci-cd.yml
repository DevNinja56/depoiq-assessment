name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Run the workflow only for the main branch

env:
  BRANCH: ${{ github.sha }}"
  APP_NAME: "depo-iq"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}

jobs:
  build-backend:
    name: Build and Push Backend

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action-deployment-role"
          role-session-name: "GitHubActionsSession"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch Backend Secrets
        run: |
          BACKEND_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.APP_NAME }}/backend --query 'SecretString' --output text)
          echo "$BACKEND_SECRET_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > backend/.env

      - name: Build and Push Backend Image
        run: |
          BACKEND_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}/backend:${{ env.BRANCH }}"
          docker build -t $BACKEND_IMAGE -f backend/Dockerfile backend/
          docker push $BACKEND_IMAGE

  build-frontend:
    name: Build and Push Frontend

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action-deployment-role"
          role-session-name: "GitHubActionsSession"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch Frontend Secrets
        run: |
          FRONTEND_SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.APP_NAME }}/frontend --query 'SecretString' --output text)
          echo "$FRONTEND_SECRET_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > frontend/.env

      - name: Build and Push Frontend Image
        run: |
          FRONTEND_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}/frontend:${{ env.BRANCH }}"
          docker build -t $FRONTEND_IMAGE -f frontend/Dockerfile frontend/
          docker push $FRONTEND_IMAGE

  deploy:
    name: Deploy to EC2

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    needs: [build-backend, build-frontend]

    steps:
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action-deployment-role"
          role-session-name: "GitHubActionsSession"

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Starting deployment process..."

            FRONTEND_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}/frontend:${{ env.BRANCH }}"
            BACKEND_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}/backend:${{ env.BRANCH }}"

            # MongoDB Deployment
            echo "Pulling and starting MongoDB container..."
            docker pull mongo:latest
            docker stop mongo || true
            docker rm mongo || true
            docker run -d --name mongo -p 27017:27017 mongo:latest

            # Redis Deployment
            echo "Pulling and starting Redis container..."
            docker pull redis:latest
            docker stop redis || true
            docker rm redis || true
            docker run -d --name redis -p 6379:6379 redis:latest

            # Backend Deployment
            echo "Deploying backend..."
            docker pull ${{ secrets.BACKEND_IMAGE }}
            docker stop backend || true
            docker rm backend || true
            docker run -d \
              --name backend \
              --link mongo:mongo \
              --link redis:redis \
              -p 4000:4000 \
              $BACKEND_IMAGE

            # Frontend Deployment
            echo "Deploying frontend..."
            docker pull ${{ secrets.FRONTEND_IMAGE }}
            docker stop frontend || true
            docker rm frontend || true
            docker run -d \
              --name frontend \
              -p 3000:3000 \
              $FRONTEND_IMAGE

            # Reload Nginx
            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            echo "Deployment completed successfully!"
          EOF
